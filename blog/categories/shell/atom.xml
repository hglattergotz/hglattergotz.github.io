<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: shell | henning glatter-götz]]></title>
  <link href="http://glatter-gotz.com/blog/categories/shell/atom.xml" rel="self"/>
  <link href="http://glatter-gotz.com/"/>
  <updated>2016-02-16T10:17:38+01:00</updated>
  <id>http://glatter-gotz.com/</id>
  <author>
    <name><![CDATA[Henning Glatter-Götz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Looping Through Dates in a Bash Script on OSX]]></title>
    <link href="http://glatter-gotz.com/blog/2011/02/19/looping-through-dates-in-a-bash-script-on-osx/"/>
    <updated>2011-02-19T00:00:00+01:00</updated>
    <id>http://glatter-gotz.com/blog/2011/02/19/looping-through-dates-in-a-bash-script-on-osx</id>
    <content type="html"><![CDATA[<blockquote><h4>UPDATE (May 21st 2015):</h4>

<p>In the <a href="#comment-2038188791">comment by hk0i</a> you will find a simpler way of doing this by installing the coreutils via homebrew</p></blockquote>

<p>A little while ago I came across a problem in PHP where I had to process large amounts of data from Google Analytics. If I choose a date range that was too large, PHP would run out of memory. I was not able to resolve the memory leak issue caused by parsing very large XML documents so I settled on writing a shell script that would process the data one day at a time by essentially calling the PHP script over and over instead of having it process all data during a single run. I got as far as confirming that this was not a case of simply not having enough memory to do the job, rather there appeared to be a memory leak in a library that I used to process the GA data.<!--more-->
Anyway, that memory leak issue is a problem that still needs to be solved, but I did not have the necessary time when I needed this to work and that is not the topic here anyway.</p>

<p>The bash script loops from a start date to an end date, incrementing one day at a time and calls the PHP script on each iteration, passing the date to the script as a parameter.</p>

<p>On Linux it was not a big deal to get it to work:</p>

<p>``` bash</p>

<h1>!/bin/bash</h1>

<p>currentdate=$1
loopenddate=$(/bin/date --date "$2 1 day" +%Y-%m-%d)</p>

<p>until [ "$currentdate" == "$loopenddate" ]
do
  echo $currentdate
  currentdate=$(/bin/date --date "$currentdate 1 day" +%Y-%m-%d)
done
```</p>

<p>Now execute the script, assuming you created a file called dateloop.sh and assigned it execute permissions:</p>

<p><code>bash
./dateloop.sh 2011-01-01 2011-01-05
</code></p>

<p>And you should get this</p>

<p><code>bash
2011-01-01
2011-01-02
2011-01-03
2011-01-04
2011-01-05
</code></p>

<p>On OSX it is not quite as straight forward (to me), because the date command does not support the <em>&#45;&#45;date</em> option. Here you have to jump through a few hoops to get it to work. I was able to figure this out with the help of <a href="http://stackoverflow.com/users/207248/siegex">SiegeX</a> on <a href="http://stackoverflow.com/questions/4434782/loop-from-start-date-to-end-date-in-mac-os-x-shell-script">stackoverflow.com</a>.</p>

<p>``` bash</p>

<h1>!/bin/bash</h1>

<p>currentDateTs=$(date -j -f "%Y-%m-%d" $1 "+%s")
endDateTs=$(date -j -f "%Y-%m-%d" $2 "+%s")
offset=86400</p>

<p>while [ "$currentDateTs" -le "$endDateTs" ]
do
  date=$(date -j -f "%s" $currentDateTs "+%Y-%m-%d")
  echo $date
  currentDateTs=$(($currentDateTs+$offset))
done
```</p>

<p>The solution here was to convert both the start and end dates to seconds (epoch) using</p>

<p><code>bash
date -j -f "%Y-%m-%d" $1 "+%s" // Lines 2 and 3 above
</code></p>

<p>and then add the number of seconds for a day (86400) and convert it back to the format I wanted</p>

<p><code>bash
date -j -f "%s" $currentDateTs "+%Y-%m-%d" // line 8 above
</code></p>

<p>Not that hard after all, as with everything else, once you understand it.</p>
]]></content>
  </entry>
  
</feed>
