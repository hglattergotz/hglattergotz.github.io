<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mssql | henning glatter-götz]]></title>
  <link href="http://glatter-gotz.com/blog/categories/mssql/atom.xml" rel="self"/>
  <link href="http://glatter-gotz.com/"/>
  <updated>2015-05-21T23:47:20+02:00</updated>
  <id>http://glatter-gotz.com/</id>
  <author>
    <name><![CDATA[Henning Glatter-Götz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Connecting to MSSQL from Symfony2 on Linux]]></title>
    <link href="http://glatter-gotz.com/blog/2015/05/21/connecting-to-mssql-from-symfony2-on-linux/"/>
    <updated>2015-05-21T23:01:56+02:00</updated>
    <id>http://glatter-gotz.com/blog/2015/05/21/connecting-to-mssql-from-symfony2-on-linux</id>
    <content type="html"><![CDATA[<p>If you find yourself trying to connect to a MSSQL database in your Symfony 2 project that is running on Linux you will soon discover that it does not work.
Even if you have figured out how to connect to MSSQL with PHP itself as outlined <a href="http://www.glatter-gotz.com/blog/2011/06/06/connecting-to-microsoft-sql-server-from-php-on-osx-and-xampp/">here</a>.</p>

<!--more-->


<p>Doctrine 2 currently supports drivers called <em>sqlsrv</em>, which is Windows only, and <em>pdo_sqlsrv</em>.
The later creates a dsn in its driver class (Doctrine\DBAL\Driver\PDOSqlsrv\Driver) that looks like this:</p>

<p><code>php
$dsn = 'sqlsrv:server=';
</code></p>

<p>When it should actually be this:</p>

<p><code>php
$dsn = 'dblib:host=';
</code></p>

<p>So what we need is a custom driver class that creates the correct connection instance. Fortunately this already exists and can be installed via composer:</p>

<p><code>bash
$ composer require leaseweb/doctrine-pdo-dblib
</code></p>

<p>The docs for this bundle state that you need to install FreeTDS, configure a connection and use that connection name as the value for the <code>host</code> key in your <code>config.yml</code>.
I have not found that to be necessary on Linux. And on OSX if you follow <a href="http://www.glatter-gotz.com/blog/2011/06/06/connecting-to-microsoft-sql-server-from-php-on-osx-and-xampp/">this</a> I did not see the need for it either.</p>

<p>In your <code>config.yml</code></p>

<p>```yml</p>

<h1>Doctrine Configuration</h1>

<p>doctrine:</p>

<pre><code>dbal:
    default_connection:   default
    connections:
        default:
            #driver:       "%default_database_driver%"
            driver_class: Lsw\DoctrinePdoDblib\Doctrine\DBAL\Driver\PDODblib\Driver
            host:         "%default_database_host%"
            port:         "%default_database_port%"
            dbname:       "%default_database_name%"
            user:         "%default_database_user%"
            password:     "%default_database_password%"
            charset:      UTF8
</code></pre>

<p>```</p>

<p>Notice that the <code>driver</code> parameter is commented out and a new parameter called <code>driver_class</code> is added, which tells doctrine to use the custom driver class that we installed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Connecting to Microsoft SQL Server from PHP on OSX and XAMPP]]></title>
    <link href="http://glatter-gotz.com/blog/2011/06/06/connecting-to-microsoft-sql-server-from-php-on-osx-and-xampp/"/>
    <updated>2011-06-06T00:00:00+02:00</updated>
    <id>http://glatter-gotz.com/blog/2011/06/06/connecting-to-microsoft-sql-server-from-php-on-osx-and-xampp</id>
    <content type="html"><![CDATA[<blockquote><h4>UPDATE (March 23rd 2012):</h4>

<p>I recently found a <a href="http://php-osx.liip.ch/">PHP binary </a>that has a one-line installer. It is actively maintained by Liip AG. I now use that in combination with <a href="http://mxcl.github.com/homebrew/">HomeBrew</a> for all the rest. The Liip package is compiled with pdo_dblib which makes the problem described in this post a non-issue.</p></blockquote>

<p>I recently found myself in the position of having to connect to a remote Microsoft SQL Server from my OSX system using PHP. The production environment runs Ubuntu LINUX, where connecting via mssql_connect() was no problem, but I develop on OSX and I could not get this to work initially.</p>

<!--more-->


<p>mssql_connect() simply returns boolean FALSE on failure and PHP tells you little more than</p>

<p><code>bash
Warning: mssql_connect(): Unable to connect to server: YOURSERVERNAME
</code></p>

<p>It took quite a few hours to finally figure out that I could turn on some additional logging on the driver level. I use XAMPP and its PHP distribution uses FreeTDS for mssql access.
There is a configuration file for this driver located at</p>

<p><code>bash
/Applications/XAMPP/xamppfiles/etc/freetds.conf
</code></p>

<p>that lets you turn on debug logging to a file.</p>

<p>Uncomment the following lines</p>

<p><code>bash
;       dump file = /tmp/freetds.log
;       debug flags = 0xffff
</code></p>

<p>And then run your connection attempt again. Take a look at the log for details on the failure.</p>

<p>In the end I added a new entry for an MS SQL server at the end of the freetds.conf file and used its name in the call to mssql_connect().</p>

<p>``` bash
[MyServerXYZ]</p>

<pre><code>    host = the_host_name
    instance = the_instance_name
    port = 1433
    tds version = 9.0
</code></pre>

<p>```</p>

<p>In my case I had to deal with an instance name that would normally be appended to the host name in a connection string, but for this driver configuration you have to use a variable called <em>instance</em>.</p>

<p>In PHP I then use this code during development</p>

<p><code>bash
$conn = mssql_connect('MyServerXYZ', $username, $password);
</code></p>
]]></content>
  </entry>
  
</feed>
