<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: symfony2 | henning glatter-götz]]></title>
  <link href="http://glatter-gotz.com/blog/categories/symfony2/atom.xml" rel="self"/>
  <link href="http://glatter-gotz.com/"/>
  <updated>2015-05-22T00:02:36+02:00</updated>
  <id>http://glatter-gotz.com/</id>
  <author>
    <name><![CDATA[Henning Glatter-Götz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setting the Symfony2 default environment]]></title>
    <link href="http://glatter-gotz.com/blog/2015/05/20/setting-the-symfony2-default-environment/"/>
    <updated>2015-05-20T12:13:22+02:00</updated>
    <id>http://glatter-gotz.com/blog/2015/05/20/setting-the-symfony2-default-environment</id>
    <content type="html"><![CDATA[<p>In my quest to type less because I am getting lazy I am trying to automate as much as I can.
Something that is a bit tiresome in Symfony2 is to have to specify the <code>--env</code> flag for each run on the command-line if you do not wish to run in the default built-in <code>dev</code> environment.</p>

<!--more-->


<p>Turns out there is an extremely simple way to override this:</p>

<p>In your <code>~/.profile</code> (or <code>~/.bash_profile</code>) simply add</p>

<p><code>bash
export SYMFONY_ENV=prod
</code></p>

<p>Any console command in your Symfony2 project will now run with --env=prod if you omit the flag.</p>

<p>Another useful thing to put in your <code>~/.profile</code> is an alias for the app/console portion of your console command:</p>

<p>```bash</p>

<h1>Symfony2 aliases</h1>

<p>alias sf='app/console'
```</p>

<p>Now, instead of having to type</p>

<p><code>bash
$ app/console namespace:command
</code></p>

<p>you can simply type</p>

<p><code>bash
$ sf namespace:command
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Things I would like to learn in 2013]]></title>
    <link href="http://glatter-gotz.com/blog/2013/01/28/things-i-would-like-to-learn-in-2013/"/>
    <updated>2013-01-28T05:38:00+01:00</updated>
    <id>http://glatter-gotz.com/blog/2013/01/28/things-i-would-like-to-learn-in-2013</id>
    <content type="html"><![CDATA[<p>There are a number of new (and not so new) things I would like to learn or have
been meaning to learn. Maybe putting them down on "paper" will serve as a
reminder and I can revisit this at the end of the year.</p>

<p>So here is my list:</p>

<ul>
<li><strong><a href="http://emberjs.com/">ember.js</a>:</strong> I have always shied away from front-end
development because I felt like it is horribly messy compared to server side
code. But with the rise of so many Javascript frameworks and the huge surge
in popularity of JS due to things like <a href="http://nodejs.org/">node.js</a> and the
<a href="http://www.appcelerator.com/">Appcelerator Titanium</a> platform I feel like
the time might be right. Ember.js looks extremely promising and interesting.</li>
</ul>


<!--more-->


<ul>
<li><strong><a href="http://www.vagrantup.com/">Vagrant:</a></strong> I have never gotten past the very
first example script that is on the Vagrant site due to time issues. But with
ever more complex development environments it just makes sense to put in the
time to get this to work.</li>
<li><strong><a href="http://symfony.com/">Symfony2</a>:</strong> It's time, it is sooo time. I have been
working with sf1 since 2009 and have started using sf2 components and more
recently been playing with composer a bit and really want to put the sf1
times behind me as much as that is possible with a fairly large sf1 code base
to maintain. Since attending Symfony LIVE in Berlin last year I really want
to start developing in Symfony2 full time.</li>
<li><strong><a href="http://www.python.org/">Python</a>:</strong> I have a very limited knowledge of
Python at this point. The only exposure I have gotten is due to my work with
<a href="http://docs.fabfile.org/en/1.5/">fabric</a>. But I would like to gain a deeper
understanding of the language to possibly write some of my long running data
processing scripts in Python instead of PHP.</li>
<li><strong>TDD:</strong> My first experience with TDD was back in 2006 with C++. This is when
I came to understand all the benefits and started advocating TDD within my
organisation. I practiced TDD quite consistently until 2009 when I switched
to PHP (don't ask). Ever since, I have only ever "started" to get back into
it. In fact I have started several times. The tools are there, I have the
knowledge (for the most part), so there really is not excuse to not
consistently practice TDD.</li>
</ul>

]]></content>
  </entry>
  
</feed>
