<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: php | henning glatter-götz]]></title>
  <link href="http://glatter-gotz.com/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://glatter-gotz.com/"/>
  <updated>2015-05-22T12:49:59+02:00</updated>
  <id>http://glatter-gotz.com/</id>
  <author>
    <name><![CDATA[Henning Glatter-Götz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Running a phpunit test for a specific dataset]]></title>
    <link href="http://glatter-gotz.com/blog/2015/05/22/running-a-phpunit-test-for-a-specific-dataset/"/>
    <updated>2015-05-22T12:41:40+02:00</updated>
    <id>http://glatter-gotz.com/blog/2015/05/22/running-a-phpunit-test-for-a-specific-dataset</id>
    <content type="html"><![CDATA[<p>When using data providers in your phpunit tests to run the same test for N different sets of input data it is
sometimes helpful if you can run the test for just a specific data set from the command line.</p>

<p>Since I can never remember the syntax when I need it I decided to write it down (mostly for myself). Next up would be to create an alias or a helper script. We shall see.</p>

<p>So lets say I want to run the test method <code>testTheThing</code> with dataset #12.</p>

<p><code>bash
$ phpunit -c app/ --filter '/::testTheThing .*#12$/'
</code></p>

<p>Details:</p>

<p><code>bash
-c app/  ....... The place where my phpunit config lives
--filter ....... pass in a filter that will limit the run to what you need
testTheThing ... The test method to call
12 ............. The number of the dataset to run
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Connecting to MSSQL from Symfony2 on Linux]]></title>
    <link href="http://glatter-gotz.com/blog/2015/05/21/connecting-to-mssql-from-symfony2-on-linux/"/>
    <updated>2015-05-21T23:01:56+02:00</updated>
    <id>http://glatter-gotz.com/blog/2015/05/21/connecting-to-mssql-from-symfony2-on-linux</id>
    <content type="html"><![CDATA[<p>If you find yourself trying to connect to a MSSQL database in your Symfony 2 project that is running on Linux you will soon discover that it does not work.
Even if you have figured out how to connect to MSSQL with PHP itself as outlined <a href="http://www.glatter-gotz.com/blog/2011/06/06/connecting-to-microsoft-sql-server-from-php-on-osx-and-xampp/">here</a>.</p>

<!--more-->


<p>Doctrine 2 currently supports drivers called <em>sqlsrv</em>, which is Windows only, and <em>pdo_sqlsrv</em>.
The later creates a dsn in its driver class (Doctrine\DBAL\Driver\PDOSqlsrv\Driver) that looks like this:</p>

<p><code>php
$dsn = 'sqlsrv:server=';
</code></p>

<p>When it should actually be this:</p>

<p><code>php
$dsn = 'dblib:host=';
</code></p>

<p>So what we need is a custom driver class that creates the correct connection instance. Fortunately this already exists and can be installed via composer:</p>

<p><code>bash
$ composer require leaseweb/doctrine-pdo-dblib
</code></p>

<p>The docs for this bundle state that you need to install FreeTDS, configure a connection and use that connection name as the value for the <code>host</code> key in your <code>config.yml</code>.
I have not found that to be necessary on Linux. And on OSX if you follow <a href="http://www.glatter-gotz.com/blog/2011/06/06/connecting-to-microsoft-sql-server-from-php-on-osx-and-xampp/">this</a> I did not see the need for it either.</p>

<p>In your <code>config.yml</code></p>

<p>```yml</p>

<h1>Doctrine Configuration</h1>

<p>doctrine:</p>

<pre><code>dbal:
    default_connection:   default
    connections:
        default:
            #driver:       "%default_database_driver%"
            driver_class: Lsw\DoctrinePdoDblib\Doctrine\DBAL\Driver\PDODblib\Driver
            host:         "%default_database_host%"
            port:         "%default_database_port%"
            dbname:       "%default_database_name%"
            user:         "%default_database_user%"
            password:     "%default_database_password%"
            charset:      UTF8
</code></pre>

<p>```</p>

<p>Notice that the <code>driver</code> parameter is commented out and a new parameter called <code>driver_class</code> is added, which tells doctrine to use the custom driver class that we installed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting the Symfony2 default environment]]></title>
    <link href="http://glatter-gotz.com/blog/2015/05/20/setting-the-symfony2-default-environment/"/>
    <updated>2015-05-20T12:13:22+02:00</updated>
    <id>http://glatter-gotz.com/blog/2015/05/20/setting-the-symfony2-default-environment</id>
    <content type="html"><![CDATA[<p>In my quest to type less because I am getting lazy I am trying to automate as much as I can.
Something that is a bit tiresome in Symfony2 is to have to specify the <code>--env</code> flag for each run on the command-line if you do not wish to run in the default built-in <code>dev</code> environment.</p>

<!--more-->


<p>Turns out there is an extremely simple way to override this:</p>

<p>In your <code>~/.profile</code> (or <code>~/.bash_profile</code>) simply add</p>

<p><code>bash
export SYMFONY_ENV=prod
</code></p>

<p>Any console command in your Symfony2 project will now run with --env=prod if you omit the flag.</p>

<p>Another useful thing to put in your <code>~/.profile</code> is an alias for the app/console portion of your console command:</p>

<p>```bash</p>

<h1>Symfony2 aliases</h1>

<p>alias sf='app/console'
```</p>

<p>Now, instead of having to type</p>

<p><code>bash
$ app/console namespace:command
</code></p>

<p>you can simply type</p>

<p><code>bash
$ sf namespace:command
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to run cron jobs with an offset]]></title>
    <link href="http://glatter-gotz.com/blog/2015/02/21/how-to-run-cron-jobs-with-an-offset/"/>
    <updated>2015-02-21T10:07:04+01:00</updated>
    <id>http://glatter-gotz.com/blog/2015/02/21/how-to-run-cron-jobs-with-an-offset</id>
    <content type="html"><![CDATA[<p>I have been using the <code>*/n</code> syntax for the minute field for some time now to run a cron task every "n" minutes starting at the top of the hour.</p>

<p>What I did not realize is that</p>

<pre><code>*/5
</code></pre>

<p>is actually equivalent to</p>

<pre><code>0-59/5
</code></pre>

<p>which basically means: run every 5 minutes starting at the top of the hour (0).</p>

<p>So if you would like to run every 5 minutes starting at 2 minutes after the hour you would simply specify</p>

<pre><code>2-59/5
</code></pre>

<p>Other examples:</p>

<pre><code>5-59/15 run at 5, 20, 35, 50 minutes

1-59/2 run every 2 minutes starting at 1 minute after the hour
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP Composer: Working with local repositories]]></title>
    <link href="http://glatter-gotz.com/blog/2014/04/09/php-composer-working-with-local-repositories/"/>
    <updated>2014-04-09T10:03:10+02:00</updated>
    <id>http://glatter-gotz.com/blog/2014/04/09/php-composer-working-with-local-repositories</id>
    <content type="html"><![CDATA[<p>When developing packages or Bundles for your Symfony2 project it is nice to be
able to manage them in their own repository and have Composer deal with installing
them in your test project. This is a bit slow and quite cumbersome if you are
using something like GitHub since you have to push changes to remote and then
Composer has to pull it all back down.</p>

<!--more-->


<p>To make this a bit more convenient it is possible to configure your project to
use a package from a local git repository:</p>

<p>In composer.json:
```json</p>

<pre><code>:
"repositories": [
    {
        "type": "vcs",
        "url": "/path/to/the/local/git/repository"
    }
],
"require": {
    :
    "username/package-name": "dev-master"
},
:
</code></pre>

<p>```
Here username/package-name is the value that is specified under the "name" key
in the composer.json of the package.</p>

<p>So the work flow would be as follows:</p>

<ul>
<li>Work on Bundle and commit to its repository locally</li>
<li>In your Symfony2 project execute <code>composer update username/package-name</code></li>
</ul>


<p>This also lets you use a git repo hosted on GitHub that is not registered on
packagist.org
```json</p>

<pre><code>:
"repositories": [
    {
        "type": "vcs",
        "url": "http://github.com/username/reponame"
    }
],
:
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
