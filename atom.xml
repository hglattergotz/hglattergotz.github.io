<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[henning glatter-götz]]></title>
  <link href="http://glatter-gotz.com/atom.xml" rel="self"/>
  <link href="http://glatter-gotz.com/"/>
  <updated>2015-05-22T12:50:54+02:00</updated>
  <id>http://glatter-gotz.com/</id>
  <author>
    <name><![CDATA[Henning Glatter-Götz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Running a phpunit test for a specific dataset]]></title>
    <link href="http://glatter-gotz.com/blog/2015/05/22/running-a-phpunit-test-for-a-specific-dataset/"/>
    <updated>2015-05-22T12:41:40+02:00</updated>
    <id>http://glatter-gotz.com/blog/2015/05/22/running-a-phpunit-test-for-a-specific-dataset</id>
    <content type="html"><![CDATA[<p>When using data providers in your phpunit tests to run the same test for N different sets of input data it is
sometimes helpful if you can run the test for just a specific data set from the command line.</p>

<!--more-->


<p>Since I can never remember the syntax when I need it I decided to write it down (mostly for myself). Next up would be to create an alias or a helper script. We shall see.</p>

<p>So lets say I want to run the test method <code>testTheThing</code> with dataset #12.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>phpunit -c app/ --filter <span class="s1">&#39;/::testTheThing .*#12$/&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Details:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>-c app/  ....... The place where my phpunit config lives
</span><span class='line'>--filter ....... pass in a filter that will limit the run to what you need
</span><span class='line'>testTheThing ... The <span class="nb">test </span>method to call
</span><span class='line'>12 ............. The number of the dataset to run
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Connecting to MSSQL from Symfony2 on Linux]]></title>
    <link href="http://glatter-gotz.com/blog/2015/05/21/connecting-to-mssql-from-symfony2-on-linux/"/>
    <updated>2015-05-21T23:01:56+02:00</updated>
    <id>http://glatter-gotz.com/blog/2015/05/21/connecting-to-mssql-from-symfony2-on-linux</id>
    <content type="html"><![CDATA[<p>If you find yourself trying to connect to a MSSQL database in your Symfony 2 project that is running on Linux you will soon discover that it does not work.
Even if you have figured out how to connect to MSSQL with PHP itself as outlined <a href="http://www.glatter-gotz.com/blog/2011/06/06/connecting-to-microsoft-sql-server-from-php-on-osx-and-xampp/">here</a>.</p>

<!--more-->


<p>Doctrine 2 currently supports drivers called <em>sqlsrv</em>, which is Windows only, and <em>pdo_sqlsrv</em>.
The later creates a dsn in its driver class (Doctrine\DBAL\Driver\PDOSqlsrv\Driver) that looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$dsn</span> <span class="o">=</span> <span class="s1">&#39;sqlsrv:server=&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>When it should actually be this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$dsn</span> <span class="o">=</span> <span class="s1">&#39;dblib:host=&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So what we need is a custom driver class that creates the correct connection instance. Fortunately this already exists and can be installed via composer:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>composer require leaseweb/doctrine-pdo-dblib
</span></code></pre></td></tr></table></div></figure>


<p>The docs for this bundle state that you need to install FreeTDS, configure a connection and use that connection name as the value for the <code>host</code> key in your <code>config.yml</code>.
I have not found that to be necessary on Linux. And on OSX if you follow <a href="http://www.glatter-gotz.com/blog/2011/06/06/connecting-to-microsoft-sql-server-from-php-on-osx-and-xampp/">this</a> I did not see the need for it either.</p>

<p>In your <code>config.yml</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># Doctrine Configuration</span>
</span><span class='line'><span class="l-Scalar-Plain">doctrine</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">dbal</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">default_connection</span><span class="p-Indicator">:</span>   <span class="l-Scalar-Plain">default</span>
</span><span class='line'>        <span class="l-Scalar-Plain">connections</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="l-Scalar-Plain">default</span><span class="p-Indicator">:</span>
</span><span class='line'>                <span class="c1">#driver:       &quot;%default_database_driver%&quot;</span>
</span><span class='line'>                <span class="l-Scalar-Plain">driver_class</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Lsw\DoctrinePdoDblib\Doctrine\DBAL\Driver\PDODblib\Driver</span>
</span><span class='line'>                <span class="l-Scalar-Plain">host</span><span class="p-Indicator">:</span>         <span class="s">&quot;%default_database_host%&quot;</span>
</span><span class='line'>                <span class="l-Scalar-Plain">port</span><span class="p-Indicator">:</span>         <span class="s">&quot;%default_database_port%&quot;</span>
</span><span class='line'>                <span class="l-Scalar-Plain">dbname</span><span class="p-Indicator">:</span>       <span class="s">&quot;%default_database_name%&quot;</span>
</span><span class='line'>                <span class="l-Scalar-Plain">user</span><span class="p-Indicator">:</span>         <span class="s">&quot;%default_database_user%&quot;</span>
</span><span class='line'>                <span class="l-Scalar-Plain">password</span><span class="p-Indicator">:</span>     <span class="s">&quot;%default_database_password%&quot;</span>
</span><span class='line'>                <span class="l-Scalar-Plain">charset</span><span class="p-Indicator">:</span>      <span class="l-Scalar-Plain">UTF8</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that the <code>driver</code> parameter is commented out and a new parameter called <code>driver_class</code> is added, which tells doctrine to use the custom driver class that we installed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting the Symfony2 default environment]]></title>
    <link href="http://glatter-gotz.com/blog/2015/05/20/setting-the-symfony2-default-environment/"/>
    <updated>2015-05-20T12:13:22+02:00</updated>
    <id>http://glatter-gotz.com/blog/2015/05/20/setting-the-symfony2-default-environment</id>
    <content type="html"><![CDATA[<p>In my quest to type less because I am getting lazy I am trying to automate as much as I can.
Something that is a bit tiresome in Symfony2 is to have to specify the <code>--env</code> flag for each run on the command-line if you do not wish to run in the default built-in <code>dev</code> environment.</p>

<!--more-->


<p>Turns out there is an extremely simple way to override this:</p>

<p>In your <code>~/.profile</code> (or <code>~/.bash_profile</code>) simply add</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">SYMFONY_ENV</span><span class="o">=</span>prod
</span></code></pre></td></tr></table></div></figure>


<p>Any console command in your Symfony2 project will now run with &#8211;env=prod if you omit the flag.</p>

<p>Another useful thing to put in your <code>~/.profile</code> is an alias for the app/console portion of your console command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Symfony2 aliases</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">sf</span><span class="o">=</span><span class="s1">&#39;app/console&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, instead of having to type</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>app/console namespace:command
</span></code></pre></td></tr></table></div></figure>


<p>you can simply type</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sf namespace:command
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why you should take a look at Ember (again)]]></title>
    <link href="http://glatter-gotz.com/blog/2015/02/23/why-you-should-take-a-look-at-ember-again/"/>
    <updated>2015-02-23T08:36:24+01:00</updated>
    <id>http://glatter-gotz.com/blog/2015/02/23/why-you-should-take-a-look-at-ember-again</id>
    <content type="html"><![CDATA[<blockquote><p>Update: The video from this talk given at <a href="http://karlsruhejs.org/post/113364758894/polymer-emberjs-tabrisjs">KarlsruheJS</a> is now available <a href="http://bit.ly/ember-video">here</a>.</p></blockquote>

<p>In January 2015 I gave a talk at the <a href="http://frankfurtjs.org">FrankfurtJS</a> Meetup on this topic and it generated quite a bit of interest. The motivation behind it was actually quite selfish, I needed a bit of pressure to dive into Ember.js a bit more and what better way to do that than to try and explain it to a room full of people?</p>

<p>By now most front-end developers have certainly heard of Ember.js and many have even given it a try. I therefore tried to combine an introduction with a bit of current information on the framework as well as the Community around Ember.js.</p>

<p>There have been significant changes in the past 6 months that in my opinion warrant another look at the framework even if you have evaluated it thoroughly before.</p>

<script async class="speakerdeck-embed" data-id="3d3f1dc0851801328fc62e7b8af14da2" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>


<!--more-->


<p>Following is a brief summary of the talk and a list of all the resources that were discussed. The demo application that was written as part of the live coding session will be discussed in a separate post. If you want to take a look at the code you can do so for the <a href="https://github.com/hglattergotz/node-twitter-example">backend</a> and the <a href="https://github.com/hglattergotz/ember-twitter-demo">Ember application</a> itself.</p>

<h2>What is Ember.js?</h2>

<p>Taken straight from the official website:</p>

<blockquote><p>A framework for creating ambitious web applications</p></blockquote>

<p>What does that mean? Because Ember.js is highly opinionated (and proud of it) it allows for larger teams to be very productive with it. This comes from its stand on &#8220;Convention over Configuration&#8221;, which basically means &#8220;The Ember way or the highway&#8221;, but it also means that once you get over the admittedly steep learning curve you will be able to focus on building your application and won&#8217;t be worrying about the mundane small stuff like where to put your files and how to name things.</p>

<p>Yehuda Kats gave a really good talk at <a href="http://www.confreaks.com/videos/3337-railsconf-keynote-10-years">RailsConf</a> about the concept of &#8220;Cognitive Depletion&#8221;. In a nutshell it means that the human brain only has a limited amount of cycles per day to make decisions and after that limit is reached you become fatigued and in turn less productive. He does a really good job of explaining this and even backs it up with scientific studies on this subject.</p>

<p>The strong conventions that Ember.js and <a href="http://ember-cli.com">ember-cli</a> enforce also result in a project structure that lets new team members become familiar with a project very quickly.</p>

<p>And lastly <em>Ember.js is optimized for developer happiness.</em> Maybe this sounds cheesy, but this is what got my attention about Ember.js in the first place. In a talk or podcast that Tom Dale and Yehuda Kats were on they talked about their mission to create a framework that makes and keeps developers happy to do their job. This is a hard one to explain because it really has to do with every aspect of Ember.js and its community but once it clicks you will know what I mean.</p>

<h2>Who is behind Ember.js?</h2>

<p>Yehuda Kats and Tom Dale are the two guys that started it, but as of March 2015 there are <a href="http://emberjs.com/team/">11 other core team members</a> from a variety of companies and places around the world. And of course there are many community members that are contributers to Ember.js in a variety of ways.</p>

<h2>The Community</h2>

<p>The Javascript community in general seems to be made up of a bunch of friendly enthusiastic people, but the Ember.js community in particular is extremely helpful and welcoming.</p>

<h4>IRC</h4>

<p>On the #emberjs IRC channel I have never seen comments like &#8220;RTFM&#8221; or the likes. In fact, in the <a href="https://www.youtube.com/watch?v=pON2erqemDY">opening keynote</a> at <a href="http://emberconf.com/">EmberConf 2014</a> Tom and Yehuda spent considerable time on explaining the code of conduct for the Ember community and what it means to make people feel welcome. From my experience it shows.</p>

<h4>Questions &amp; Discussions</h4>

<p><a href="http://stackoverflow.com/questions/tagged/ember.js">Stackoverflow</a> is of course a great place to ask questions, I have <a href="http://www.alfredapp.com/">Alfred</a> configured to look there for my programming questions.
For more involved discussions check out the <a href="http://discuss.emberjs.com/">discussion forum</a> hosted on Discourse, which coincidentally is one of the first Ember.js apps to appear in the wild, and its <a href="https://github.com/discourse/discourse">open source</a>!</p>

<h4>Conferences</h4>

<p>There are at this point in time two Ember.js conferences. One is in the US - <a href="http://emberconf.com">EmberConf</a> - and the other is in Europe - <a href="https://emberfest.eu/">Ember Fest</a>.</p>

<h4>Meetups</h4>

<p>If you are fortunate enough to have an Ember.js meetup near you - GO! A list of the currently active meetups can be found <a href="http://emberjs.com/community/meetups/">here</a>.</p>

<h2>Useful Resources</h2>

<h4>Website</h4>

<p>Probably the best place to start is the <a href="http://emberjs.com">Ember.js website</a>. It has excellent documentation and tons of current examples. You will also find information about the current releases as well as upcoming releases.</p>

<h4>Newsletter</h4>

<p>I find that the newsletter <a href="http://emberweekly.com">emberweekly.com</a> is a great resource for staying on top of what is going on in ember land. It lists the developments of Ember.js as well as related projects and provides links to videos, blog posts and upcoming events.</p>

<h4>Podcasts</h4>

<p>I get a lot of information from podcasts. They are a great source of current information directly from the people close to various projects and technologies.</p>

<p>Some of the more interesting ones for Ember.js developers:</p>

<ul>
<li><a href="http://www.ember.land/"><strong>Ember Land</strong></a> is a brand new podcast dedicated to Ember.js</li>
<li><a href="http://devchat.tv/js-jabber/"><strong>Javascript Jabber</strong></a>
There are some episodes dedicated to Ember.js. <a href="http://devchat.tv/js-jabber/121-jsj-broccoli-js-with-jo-liss">121</a>, <a href="http://devchat.tv/js-jabber/112-jsj-refactoring-javascript-apps-into-a-framework-with-brandon-hays">112</a>, <a href="http://devchat.tv/js-jabber/111-jsj-the-ember-js-project-with-erik-bryn">111</a></li>
<li><a href="https://frontsidethepodcast.simplecast.fm"><strong>Frontside the Podcast</strong></a>
This is a fairly Ember.js centric podcast since the hosts are Ember.js consultants (well, they do most of their work in Ember.js).</li>
<li><a href="http://thechangelog.com/"><strong>The Changelog</strong></a>
Episode <a href="http://thechangelog.com/131/">131</a> is an interview with Tom Dale and Yehuda Katz</li>
<li><a href="http://descriptive.audio/"><strong>Descriptive</strong></a>
Episode <a href="http://descriptive.audio/episodes/2">2</a> is a really interesting discussion about refactoring to Ember.js</li>
</ul>


<h4>Videos</h4>

<ul>
<li>The Ember.js <a href="https://www.youtube.com/user/EmberNYC">Meetup in NYC</a> is probably one of the most professional I have found.
The meetings are all recorded and core team members speak there on a regular basis.</li>
<li>EmberConf 2015 has a <a href="https://www.youtube.com/playlist?list=PLE7tQUdRKcyacwiUPs0CjPYt6tJub4xXU">playlist on YouTube</a></li>
<li>EmberConf 2014 has a <a href="https://www.youtube.com/playlist?list=PLE7tQUdRKcyaOyfBnAndJxQ9PNVmKva0d">playlist on YouTube</a></li>
<li>Ember London has a good <a href="https://vimeo.com/emberlondon/videos">collection</a> of videos</li>
<li>EmberFest 2014 has published a <a href="https://www.youtube.com/playlist?list=PLN4SpDLOSVkSbGTLohVaYGDB8hxWxGPBA">playlist on YouTube</a></li>
</ul>


<h2>Tools</h2>

<h4>ember-cli</h4>

<p>In my opinion <a href="http://www.ember-cli.com/">ember-cli</a> is probably one of the most significant improvements to come out in the last 6-12 months. What I mean by that is that it is a huge factor in reducing the barrier of entry to Ember.js. The reason for this is that it eliminates an number of complicated tasks required for getting an Ember.js production app going and lets you get right to it. Not only does it take care of the entire build process, but it also provides an application skeleton, a dev server, a watcher to rebuild your app, auto-reload in the browser, ES6 modules and a proxy to allow you to make calls to your backend.</p>

<p>If you are starting a new app, use ember-cli, period.</p>

<h4>Ember Inspector</h4>

<p>There is a handy tool called the Ember Inspector for both Chrome and Firefox that provides insights into your Ember.js application, that not only helps with debugging but provides a visual representation of many of the applications components.</p>

<h2>Noteworthy features</h2>

<h4>Ember Data</h4>

<p>Ember data will allow you to talk to your backend API with very little effort IF it follows the conventions that Ember Data expects. So, if you are on a green field project where you are building your own API or if you have control of the API you are in luck.  But even if you have to use an existing API it might be possible to write custom serializers and still take advantage of Ember Data. In any case it is worth a look! It is very close to 1.0.0.</p>

<h4>Components</h4>

<p><a href="http://emberjs.com/guides/components/">Ember components</a> are trying to adhere to the official Web Components Specification as closely as possible with the intention to allow for a painless migration of the Ember Components to the W3C standard components that can then be used in other frameworks as well.</p>

<h4>Fastboot</h4>

<p>There is currently an effort under way to implement a feature called <a href="http://emberjs.com/blog/2015/01/08/inside-fastboot-faking-the-dom-in-node.html">Fastboot</a>, which aims to provide server side rendering of the initial page. This effort will provide the ability load HTML and CSS immediately with the Javascript downloading in the background to provide fast initial page loads.</p>

<h4>Maintainability</h4>

<p>The Ember.js project has adopted a six week release cycle very similar to the process that Google Chrome uses.  This provides a clear and predictable path forward with small incremental changes that make it manageable to keep your applications up to date with the most current framework release.  Because the changes are small-isch it is not as time consuming to move from one release to the next and does not require full rewrites.</p>

<h2>Live Coding Demo</h2>

<p>The demo application will be discussed in one or more future posts. It consists of a <a href="https://github.com/hglattergotz/node-twitter-example">node.js backend</a> and the actual <a href="https://github.com/hglattergotz/ember-twitter-demo">Ember.js frontend application</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to run cron jobs with an offset]]></title>
    <link href="http://glatter-gotz.com/blog/2015/02/21/how-to-run-cron-jobs-with-an-offset/"/>
    <updated>2015-02-21T10:07:04+01:00</updated>
    <id>http://glatter-gotz.com/blog/2015/02/21/how-to-run-cron-jobs-with-an-offset</id>
    <content type="html"><![CDATA[<p>I have been using the <code>*/n</code> syntax for the minute field for some time now to run a cron task every &#8220;n&#8221; minutes starting at the top of the hour.</p>

<p>What I did not realize is that</p>

<pre><code>*/5
</code></pre>

<p>is actually equivalent to</p>

<pre><code>0-59/5
</code></pre>

<p>which basically means: run every 5 minutes starting at the top of the hour (0).</p>

<p>So if you would like to run every 5 minutes starting at 2 minutes after the hour you would simply specify</p>

<pre><code>2-59/5
</code></pre>

<p>Other examples:</p>

<pre><code>5-59/15 run at 5, 20, 35, 50 minutes

1-59/2 run every 2 minutes starting at 1 minute after the hour
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sorting records with Ember.js]]></title>
    <link href="http://glatter-gotz.com/blog/2015/01/20/sorting-records-with-ember-dot-js/"/>
    <updated>2015-01-20T22:48:42+01:00</updated>
    <id>http://glatter-gotz.com/blog/2015/01/20/sorting-records-with-ember-dot-js</id>
    <content type="html"><![CDATA[<p>Ember.js provides a few really nice features out of the box to let you sort your records
for display purposes. In the <a href="http://emberjs.com/guides/controllers/representing-multiple-models-with-arraycontroller/">docs</a>
there is a short paragraph about it (SORTING) that does not tell the whole story so be
sure to click the link about the <a href="http://emberjs.com/api/classes/Ember.SortableMixin.html">Ember.SortableMixin</a>
for some more information.</p>

<!--more-->


<p>The important detail is in the last two paragraphs:</p>

<blockquote><p>SortableMixin works by sorting the arrangedContent array, which is the array that
ArrayProxy displays. Due to the fact that the underlying &#8216;content&#8217; array is not changed.</p></blockquote>

<p>So if you changed your controller to an <strong>ArrayController</strong> and added the properties
<strong>sortProperties</strong> and <strong>sortAscending</strong> so your controller looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">SongsController</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">ArrayController</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">sortProperties</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;artist&#39;</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">sortAscending</span><span class="o">:</span> <span class="kc">true</span> <span class="c1">// false for descending</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>and you are wondering why your content is not sorted when writing the following in your template</p>

<div>
  <pre><code class='html'>{{#each record in content}}
 :
{{/each}}</code></pre>
</div>


<p>It is because it should be</p>

<div>
  <pre><code class='html'>{{#each record in arrangedContent}}
 :
{{/each}}</code></pre>
</div>


<p>However the very last paragraph on the above mentioned API docs page states</p>

<blockquote><p>Although the sorted content can also be accessed through the arrangedContent property,
it is preferable to use the proxied class and not the arrangedContent array directly.</p></blockquote>

<p>That makes sense, but I am not sure how to do that in a template. So far it seems to work
as needed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bye Bye Spideroak]]></title>
    <link href="http://glatter-gotz.com/blog/2015/01/12/bye-bye-spideroak/"/>
    <updated>2015-01-12T10:35:49+01:00</updated>
    <id>http://glatter-gotz.com/blog/2015/01/12/bye-bye-spideroak</id>
    <content type="html"><![CDATA[<p>Yesterday marked the beginning of the 5th (fifth!!) month, yes, MONTH(!!), that I
have an open and unresolved support ticket with <a href="https://spideroak.com/">SpiderOak</a>.
I nag them every few weeks and then they go quiet after a brief exchange and a promise
that they are working hard to resolve the issue.</p>

<!--more-->


<p>I have been a paying customer for many years now and have always been happy with their
product even though slow support response times have always been something that left
a bit to be desired. By slow, I mean days, not months, as is the case with this issue.</p>

<p>I have three systems in my household backing up to SpiderOak, which has at last check
used roughly 850GB. Back in September one of these systems had a total failure and
needed to be replaced. This is where the issues started. After you install the
SpiderOak application it tries to synchronize itself with the SpiderOak server. This
process is called syndication. From what I can gather this is to provide each client
a view of your entire file system inside of SpiderOak. This process simply never
completes, even after two weeks on a 100/6 Mbit/s Internet connection.</p>

<p>SpiderOak support has at this point only let me know that there is an issue with my
account on their end and that they are working hard to resolve it. That has been the
story since September 2014. It is now January 2015.</p>

<p>I really liked SpiderOak, strangely I still do. It seemed like a product and company by nerds
for nerds. The <a href="https://spideroak.com/zero-knowledge/">Zero-Knowledge</a> privacy feature was
the most appealing thing to me. Just before they came out with their offer for unlimited
storage for about $120 per year I was gladly paying $500 per year for 500GB.</p>

<p>I remember being concerned about this offer that they announced in March of 2014.
It would surely have a negative effect on their service and most definitely on their
already overworked/understaffed support department. Or even worse, that it might be a
last ditch effort to raise capital before going out of business. So far I can only
confirm that their support department has basically imploded.</p>

<p>Despite the 13 free months of service that I have received as a result of the slow
resolution of this case I can no longer use SpiderOak. It simply does not work!
Zero-Knowledge privacy is all fine and dandy, but if the service cannot backup your
files, then what is the point?</p>

<p>I started using CrashPlan with a custom encryption key and as soon as all files are
backed up I will be closing my account with SpiderOak.
Over the years I have recommended SpiderOak to many friends, co-workers and family,
but I can no longer do that. I know of people that are happy with SpiderOak and it
works fine for them. Maybe it is just some kind of limitation in their system that
does not scale well or at all after a certain backup size.</p>

<p>So, bye bye SpiderOak!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ember.js Resources]]></title>
    <link href="http://glatter-gotz.com/blog/2015/01/05/ember-dot-js-resources/"/>
    <updated>2015-01-05T04:00:00+01:00</updated>
    <id>http://glatter-gotz.com/blog/2015/01/05/ember-dot-js-resources</id>
    <content type="html"><![CDATA[<blockquote><p>Please note that this was published in January of 2015. So keep in mind that the
shelf-life is limited</p></blockquote>

<p>The following is a helpful list of where to find current information on Ember.js:</p>

<!--more-->


<ul>
<li>The best place to start is the Ember website itself <a href="http://emberjs.com">emberjs.com</a>.
The docs live there and on the blog you can find current news on the project.</li>
<li><a href="http://emberweekly.com/">Ember Weekly</a> is a newsletter all about ember. It is an
outstanding aggregation of what is happening in the Ember ecosystem.</li>
</ul>


<p>Two recent podcasts with great info about the upcoming Ember 2.0 release:</p>

<ul>
<li><p><a href="https://frontsidethepodcast.simplecast.fm/16"><strong>Frontside the Podcast: Ember 2.0 and the Indie Web with Yehuda Katz and Tom Dale</strong></a><br/>
This is a fairly new podcast that I came across recently. This episode from December
23rd 2014 features Tom Dale and Yehuda Katz and they talk about current work on
Ember.js.</p>

<p>Highlights:</p>

<ul>
<li>HTMLBars - Complete replacement of the render engine</li>
<li>FastBoot - server side rendering</li>
<li>Important aspects of running a successful OSS project</li>
</ul>
</li>
<li><p><a href="http://thechangelog.com/131/"><strong>The Changelog: The road to Ember 2.0 with Tom Dale and Yehuda Katz</strong></a><br/>
Similar info to the previous one</p></li>
<li><p>The Ember.js <a href="https://www.youtube.com/user/EmberNYC">Meetup in NYC</a> is probably one of the most professional I have found.
The meetings are all recorded and core team members speak there on a regular basis.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[express-generator on OSX/homebrew node install]]></title>
    <link href="http://glatter-gotz.com/blog/2014/04/24/express-generator-on-osx-slash-homebrew-node-install/"/>
    <updated>2014-04-24T23:01:47+02:00</updated>
    <id>http://glatter-gotz.com/blog/2014/04/24/express-generator-on-osx-slash-homebrew-node-install</id>
    <content type="html"><![CDATA[<p>The <a href="http://expressjs.com/guide.html#executable">express</a> docs claim that you
can simply install the express-generator globally and use it to generate
application skeletons.</p>

<!--more-->


<p>Well, I followed the instructions to install express-generator</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>npm install -g express-generator
</span></code></pre></td></tr></table></div></figure>


<p>and got</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>express
</span><span class='line'>-bash: express: <span class="nb">command </span>not found
</span></code></pre></td></tr></table></div></figure>


<p>I am working on OSX and installed node via homebrew, which is what is causing
this issue, at least for express. Because other globally installed packages
worked fine.</p>

<p>The output of the installation gives you a hint. The executable is installed in</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/usr/local/share/npm/bin/
</span></code></pre></td></tr></table></div></figure>


<p>Add that directory to your path and it will solve the problem.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span>/usr/local/share/npm/bin:<span class="nv">$PATH</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP Composer: Working with local repositories]]></title>
    <link href="http://glatter-gotz.com/blog/2014/04/09/php-composer-working-with-local-repositories/"/>
    <updated>2014-04-09T10:03:10+02:00</updated>
    <id>http://glatter-gotz.com/blog/2014/04/09/php-composer-working-with-local-repositories</id>
    <content type="html"><![CDATA[<p>When developing packages or Bundles for your Symfony2 project it is nice to be
able to manage them in their own repository and have Composer deal with installing
them in your test project. This is a bit slow and quite cumbersome if you are
using something like GitHub since you have to push changes to remote and then
Composer has to pull it all back down.</p>

<!--more-->


<p>To make this a bit more convenient it is possible to configure your project to
use a package from a local git repository:</p>

<p>In composer.json:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">:</span>
</span><span class='line'><span class="s2">&quot;repositories&quot;</span><span class="err">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;vcs&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;url&quot;</span><span class="p">:</span> <span class="s2">&quot;/path/to/the/local/git/repository&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">]</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;require&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="err">:</span>
</span><span class='line'>    <span class="nt">&quot;username/package-name&quot;</span><span class="p">:</span> <span class="s2">&quot;dev-master&quot;</span>
</span><span class='line'><span class="p">}</span><span class="err">,</span>
</span><span class='line'><span class="err">:</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here username/package-name is the value that is specified under the &#8220;name&#8221; key
in the composer.json of the package.</p>

<p>So the work flow would be as follows:</p>

<ul>
<li>Work on Bundle and commit to its repository locally</li>
<li>In your Symfony2 project execute <code>composer update username/package-name</code></li>
</ul>


<p>This also lets you use a git repo hosted on GitHub that is not registered on
packagist.org</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">:</span>
</span><span class='line'><span class="s2">&quot;repositories&quot;</span><span class="err">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;vcs&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;url&quot;</span><span class="p">:</span> <span class="s2">&quot;http://github.com/username/reponame&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">]</span><span class="err">,</span>
</span><span class='line'><span class="err">:</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git merge specific files from one branch into another]]></title>
    <link href="http://glatter-gotz.com/blog/2014/04/08/git-merge-specific-files-from-one-branch-into-another/"/>
    <updated>2014-04-08T10:10:41+02:00</updated>
    <id>http://glatter-gotz.com/blog/2014/04/08/git-merge-specific-files-from-one-branch-into-another</id>
    <content type="html"><![CDATA[<p>I have started to use <a href="http://nvie.com/posts/a-successful-git-branching-model/">git branching</a>
more heavily in recent months and also make it a point to have small and well
documented commits. This sometimes leads to the need to merge specific files
from one branch into another (good or bad, it just happens). Git facilitates
this with <code>checkout</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git checkout <span class="nb">source</span>-branch-name/commit-sha path/tofile/of/interest
</span></code></pre></td></tr></table></div></figure>


<p>If you do not provide the commit sha it will simply checkout the file at the
HEAD of the source branch.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Things I would like to learn in 2013]]></title>
    <link href="http://glatter-gotz.com/blog/2013/01/28/things-i-would-like-to-learn-in-2013/"/>
    <updated>2013-01-28T05:38:00+01:00</updated>
    <id>http://glatter-gotz.com/blog/2013/01/28/things-i-would-like-to-learn-in-2013</id>
    <content type="html"><![CDATA[<p>There are a number of new (and not so new) things I would like to learn or have
been meaning to learn. Maybe putting them down on &#8220;paper&#8221; will serve as a
reminder and I can revisit this at the end of the year.</p>

<p>So here is my list:</p>

<ul>
<li><strong><a href="http://emberjs.com/">ember.js</a>:</strong> I have always shied away from front-end
development because I felt like it is horribly messy compared to server side
code. But with the rise of so many Javascript frameworks and the huge surge
in popularity of JS due to things like <a href="http://nodejs.org/">node.js</a> and the
<a href="http://www.appcelerator.com/">Appcelerator Titanium</a> platform I feel like
the time might be right. Ember.js looks extremely promising and interesting.</li>
</ul>


<!--more-->


<ul>
<li><strong><a href="http://www.vagrantup.com/">Vagrant:</a></strong> I have never gotten past the very
first example script that is on the Vagrant site due to time issues. But with
ever more complex development environments it just makes sense to put in the
time to get this to work.</li>
<li><strong><a href="http://symfony.com/">Symfony2</a>:</strong> It&#8217;s time, it is sooo time. I have been
working with sf1 since 2009 and have started using sf2 components and more
recently been playing with composer a bit and really want to put the sf1
times behind me as much as that is possible with a fairly large sf1 code base
to maintain. Since attending Symfony LIVE in Berlin last year I really want
to start developing in Symfony2 full time.</li>
<li><strong><a href="http://www.python.org/">Python</a>:</strong> I have a very limited knowledge of
Python at this point. The only exposure I have gotten is due to my work with
<a href="http://docs.fabfile.org/en/1.5/">fabric</a>. But I would like to gain a deeper
understanding of the language to possibly write some of my long running data
processing scripts in Python instead of PHP.</li>
<li><strong>TDD:</strong> My first experience with TDD was back in 2006 with C++. This is when
I came to understand all the benefits and started advocating TDD within my
organisation. I practiced TDD quite consistently until 2009 when I switched
to PHP (don&#8217;t ask). Ever since, I have only ever &#8220;started&#8221; to get back into
it. In fact I have started several times. The tools are there, I have the
knowledge (for the most part), so there really is not excuse to not
consistently practice TDD.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bye bye 2012]]></title>
    <link href="http://glatter-gotz.com/blog/2012/12/31/bye-bye-2012/"/>
    <updated>2012-12-31T19:48:00+01:00</updated>
    <id>http://glatter-gotz.com/blog/2012/12/31/bye-bye-2012</id>
    <content type="html"><![CDATA[<p>This year was certainly tumultuous!!</p>

<ul>
<li>Had another big &#8220;0&#8221; Birthday</li>
<li>Had a second child - a daughter</li>
<li>Moved to a different continent</li>
</ul>


<p>Those are some major changes that definitely caused some moments of temporary insanity, some where longer than others and seemed to never end. But I am still standing!</p>

<!--more-->


<p>Things I learned:</p>

<ul>
<li>Becoming a dad for the second time does not make the sleep deprivation less painful in any way! Whatsoever! If anything it is worse, because you know what is about to happen to you in the next 18 to 24 months - NO SLEEP!!!</li>
<li>Moving internationally with small children takes about 5 years off your life.</li>
<li>Hiring the company <a href="http://www.inhouserelocation.com">Inhouse Relocation</a> to ease the pain of moving internationally is a waste of money.</li>
<li><a href="http://www.symfony.com">Symfony2</a> is pretty amazing</li>
<li><a href="http://getcomposer.org">Composer</a> rocks!</li>
<li>Parallel processing with PHP is doable</li>
<li>Beanstalkd is really cool</li>
<li>A day does not have enough hours in it to be a great husband, and dad, put in a 8 hour workday, work on a side project, maintain your hobbies, and learn new things.</li>
</ul>


<p>So whats in store for 2013?</p>

<ul>
<li>I shall be <a href="http://webadvent.org/2012/be-lazy-by-kitt-hodsden">lazier</a> than ever! Especially at work.</li>
<li>I want to get at least one app into the app store.</li>
<li>I shall blog more frequently (once a week).</li>
</ul>


<p>2013 bring it on!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[./symfony doctrine:build-schema for a Single Table]]></title>
    <link href="http://glatter-gotz.com/blog/2012/07/16/symfony-doctrine-build-schema-for-a-single-table/"/>
    <updated>2012-07-16T06:52:00+02:00</updated>
    <id>http://glatter-gotz.com/blog/2012/07/16/symfony-doctrine-build-schema-for-a-single-table</id>
    <content type="html"><![CDATA[<p>The built-in command line tasks in symfony 1.4 (yes, I am still stuck on 1.4)
are very handy for quickly performing all sorts of project related tasks.
Doctrines own command line tasks are exposed through the symfony CLI in the
<em>doctrine</em> namespace.
I use the <code>doctrine:build-schema</code> task, which generates a yml schema for an
existing database, all the time. This allows one to very rapidly build models
from and for an existing database.</p>

<!--more-->


<p>But therein also lies a problem - at least sometimes. I am often working on
projects with multiple large databases that consist of dozens or hundreds of
tables. And most often I only need to have models for a very small subset of
the total list of tables.
I used to simply generate the yml schema with <code>./symfony docrine:build-schema</code>
and then manually remove the tables I did not need. Horrible!! Slow, error
prone and mind numbing.</p>

<p>It would be great if there was a more granular version of this task.
For example</p>

<blockquote><p>Add the schema for table X on database Y to the existing schema file</p></blockquote>


<p>Enter <code>doctrine:build-table-schema</code>.
I wrapped the functionality in a class that is really nothing more than a slight
variation of part of the <code>Doctrine_Import</code> class. More specifically its
<code>importSchema</code> method. But instead of building the schema for all tables of
the database it simply builds the ones that have been explicitly requested.</p>

<figure class='code'><figcaption><span>SchemaBuilder.class.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Build the schema for multiple connections and specific tables for those</span>
</span><span class='line'><span class="sd"> * connections.</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * Example:</span>
</span><span class='line'><span class="sd"> *   $connections = array(</span>
</span><span class='line'><span class="sd"> *       &#39;connection1&#39; =&gt; array(&#39;table1&#39;, &#39;table2&#39;),</span>
</span><span class='line'><span class="sd"> *       &#39;connection2&#39; =&gt; array(&#39;table1&#39;, &#39;table2&#39;)</span>
</span><span class='line'><span class="sd"> *   );</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * @param type $directory</span>
</span><span class='line'><span class="sd"> * @param array $connections Array of connection names with their associated</span>
</span><span class='line'><span class="sd"> *                           tables</span>
</span><span class='line'><span class="sd"> * @param array $options</span>
</span><span class='line'><span class="sd"> * @return array</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">protected</span> <span class="k">function</span> <span class="nf">buildPHPModels</span><span class="p">(</span><span class="nv">$directory</span><span class="p">,</span> <span class="k">array</span> <span class="nv">$connections</span> <span class="o">=</span> <span class="k">array</span><span class="p">(),</span> <span class="k">array</span> <span class="nv">$options</span> <span class="o">=</span> <span class="k">array</span><span class="p">())</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nv">$classes</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$manager</span> <span class="o">=</span> <span class="nx">Doctrine_Manager</span><span class="o">::</span><span class="na">getInstance</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">foreach</span> <span class="p">(</span><span class="nv">$manager</span> <span class="k">as</span> <span class="nv">$name</span> <span class="o">=&gt;</span> <span class="nv">$connection</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Limit the databases to the ones specified by $connections.</span>
</span><span class='line'>    <span class="c1">// Check only happens if array is not empty</span>
</span><span class='line'>    <span class="nv">$connectionNames</span> <span class="o">=</span> <span class="nb">array_keys</span><span class="p">(</span><span class="nv">$connections</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$connections</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nb">in_array</span><span class="p">(</span><span class="nv">$name</span><span class="p">,</span> <span class="nv">$connectionNames</span><span class="p">))</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$builder</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Doctrine_Import_Builder</span><span class="p">();</span>
</span><span class='line'>    <span class="nv">$builder</span><span class="o">-&gt;</span><span class="na">setTargetPath</span><span class="p">(</span><span class="nv">$directory</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$builder</span><span class="o">-&gt;</span><span class="na">setOptions</span><span class="p">(</span><span class="nv">$options</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$definitions</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>    <span class="nv">$currentConnName</span> <span class="o">=</span> <span class="nv">$connection</span><span class="o">-&gt;</span><span class="na">getName</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$connection</span><span class="o">-&gt;</span><span class="na">import</span><span class="o">-&gt;</span><span class="na">listTables</span><span class="p">()</span> <span class="k">as</span> <span class="nv">$table</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">in_array</span><span class="p">(</span><span class="nv">$table</span><span class="p">,</span> <span class="nv">$connections</span><span class="p">[</span><span class="nv">$currentConnName</span><span class="p">]))</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="nv">$definition</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>      <span class="nv">$definition</span><span class="p">[</span><span class="s1">&#39;tableName&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$table</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$definition</span><span class="p">[</span><span class="s1">&#39;className&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">Doctrine_Inflector</span><span class="o">::</span><span class="na">classify</span><span class="p">(</span><span class="nx">Doctrine_Inflector</span><span class="o">::</span><span class="na">tableize</span><span class="p">(</span><span class="nv">$table</span><span class="p">));</span>
</span><span class='line'>      <span class="nv">$definition</span><span class="p">[</span><span class="s1">&#39;columns&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$connection</span><span class="o">-&gt;</span><span class="na">import</span><span class="o">-&gt;</span><span class="na">listTableColumns</span><span class="p">(</span><span class="nv">$table</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$definition</span><span class="p">[</span><span class="s1">&#39;connection&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$connection</span><span class="o">-&gt;</span><span class="na">getName</span><span class="p">();</span>
</span><span class='line'>      <span class="nv">$definition</span><span class="p">[</span><span class="s1">&#39;connectionClassName&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$definition</span><span class="p">[</span><span class="s1">&#39;className&#39;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">try</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="nv">$definition</span><span class="p">[</span><span class="s1">&#39;relations&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>        <span class="nv">$relations</span> <span class="o">=</span> <span class="nv">$connection</span><span class="o">-&gt;</span><span class="na">import</span><span class="o">-&gt;</span><span class="na">listTableRelations</span><span class="p">(</span><span class="nv">$table</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$relClasses</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$relations</span> <span class="k">as</span> <span class="nv">$relation</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="nv">$table</span> <span class="o">=</span> <span class="nv">$relation</span><span class="p">[</span><span class="s1">&#39;table&#39;</span><span class="p">];</span>
</span><span class='line'>          <span class="nv">$class</span> <span class="o">=</span> <span class="nx">Doctrine_Inflector</span><span class="o">::</span><span class="na">classify</span><span class="p">(</span><span class="nx">Doctrine_Inflector</span><span class="o">::</span><span class="na">tableize</span><span class="p">(</span><span class="nv">$table</span><span class="p">));</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nb">in_array</span><span class="p">(</span><span class="nv">$class</span><span class="p">,</span> <span class="nv">$relClasses</span><span class="p">))</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>            <span class="nv">$alias</span> <span class="o">=</span> <span class="nv">$class</span> <span class="o">.</span> <span class="s1">&#39;_&#39;</span> <span class="o">.</span> <span class="p">(</span><span class="nb">count</span><span class="p">(</span><span class="nv">$relClasses</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">else</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>            <span class="nv">$alias</span> <span class="o">=</span> <span class="nv">$class</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="nv">$relClasses</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$class</span><span class="p">;</span>
</span><span class='line'>          <span class="nv">$definition</span><span class="p">[</span><span class="s1">&#39;relations&#39;</span><span class="p">][</span><span class="nv">$alias</span><span class="p">]</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>              <span class="s1">&#39;alias&#39;</span> <span class="o">=&gt;</span> <span class="nv">$alias</span><span class="p">,</span>
</span><span class='line'>              <span class="s1">&#39;class&#39;</span> <span class="o">=&gt;</span> <span class="nv">$class</span><span class="p">,</span>
</span><span class='line'>              <span class="s1">&#39;local&#39;</span> <span class="o">=&gt;</span> <span class="nv">$relation</span><span class="p">[</span><span class="s1">&#39;local&#39;</span><span class="p">],</span>
</span><span class='line'>              <span class="s1">&#39;foreign&#39;</span> <span class="o">=&gt;</span> <span class="nv">$relation</span><span class="p">[</span><span class="s1">&#39;foreign&#39;</span><span class="p">]</span>
</span><span class='line'>          <span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">catch</span> <span class="p">(</span><span class="nx">Exception</span> <span class="nv">$e</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="nv">$definitions</span><span class="p">[</span><span class="nx">strtolower</span><span class="p">(</span><span class="nv">$definition</span><span class="p">[</span><span class="s1">&#39;className&#39;</span><span class="p">])]</span> <span class="o">=</span> <span class="nv">$definition</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$classes</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$definition</span><span class="p">[</span><span class="s1">&#39;className&#39;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Build opposite end of relationships</span>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$definitions</span> <span class="k">as</span> <span class="nv">$definition</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nv">$className</span> <span class="o">=</span> <span class="nv">$definition</span><span class="p">[</span><span class="s1">&#39;className&#39;</span><span class="p">];</span>
</span><span class='line'>      <span class="nv">$relClasses</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>      <span class="k">foreach</span> <span class="p">(</span><span class="nv">$definition</span><span class="p">[</span><span class="s1">&#39;relations&#39;</span><span class="p">]</span> <span class="k">as</span> <span class="nv">$alias</span> <span class="o">=&gt;</span> <span class="nv">$relation</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nb">in_array</span><span class="p">(</span><span class="nv">$relation</span><span class="p">[</span><span class="s1">&#39;class&#39;</span><span class="p">],</span> <span class="nv">$relClasses</span><span class="p">)</span> <span class="o">||</span> <span class="nb">isset</span><span class="p">(</span><span class="nv">$definitions</span><span class="p">[</span><span class="nv">$relation</span><span class="p">[</span><span class="s1">&#39;class&#39;</span><span class="p">]][</span><span class="s1">&#39;relations&#39;</span><span class="p">][</span><span class="nv">$className</span><span class="p">]))</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="nv">$alias</span> <span class="o">=</span> <span class="nv">$className</span> <span class="o">.</span> <span class="s1">&#39;_&#39;</span> <span class="o">.</span> <span class="p">(</span><span class="nb">count</span><span class="p">(</span><span class="nv">$relClasses</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="nv">$alias</span> <span class="o">=</span> <span class="nv">$className</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nv">$relClasses</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$relation</span><span class="p">[</span><span class="s1">&#39;class&#39;</span><span class="p">];</span>
</span><span class='line'>        <span class="nv">$definitions</span><span class="p">[</span><span class="nx">strtolower</span><span class="p">(</span><span class="nv">$relation</span><span class="p">[</span><span class="s1">&#39;class&#39;</span><span class="p">])][</span><span class="s1">&#39;relations&#39;</span><span class="p">][</span><span class="nv">$alias</span><span class="p">]</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>            <span class="s1">&#39;type&#39;</span> <span class="o">=&gt;</span> <span class="nx">Doctrine_Relation</span><span class="o">::</span><span class="na">MANY</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;alias&#39;</span> <span class="o">=&gt;</span> <span class="nv">$alias</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;class&#39;</span> <span class="o">=&gt;</span> <span class="nv">$className</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;local&#39;</span> <span class="o">=&gt;</span> <span class="nv">$relation</span><span class="p">[</span><span class="s1">&#39;foreign&#39;</span><span class="p">],</span>
</span><span class='line'>            <span class="s1">&#39;foreign&#39;</span> <span class="o">=&gt;</span> <span class="nv">$relation</span><span class="p">[</span><span class="s1">&#39;local&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Build records</span>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$definitions</span> <span class="k">as</span> <span class="nv">$definition</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nv">$builder</span><span class="o">-&gt;</span><span class="na">buildRecord</span><span class="p">(</span><span class="nv">$definition</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nv">$classes</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The entire code including a symfony task to call it is available as a symfony 1.4
plugin on github.com. It is part of a utilities plugin that is available at
<a href="http://github.com/hglattergotz/uUtilitiesPlugin">http://github.com/hglattergotz/uUtilitiesPlugin</a>.</p>

<p>The class can be found here <code>uUtilitiesPlugin/lib/SchemaBuilder</code></p>

<p>To add the schema for table <em>A</em> in database connection <em>Z</em> you would execute this from the
symfony project folder:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./symfony doctrine:build-schema-table --connection<span class="o">=</span>Z --table<span class="o">=</span>A --application<span class="o">=</span>myapp
</span><span class='line'>./symfony doctrine:build-model
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP: The Right Way]]></title>
    <link href="http://glatter-gotz.com/blog/2012/07/10/php-the-right-way/"/>
    <updated>2012-07-10T11:12:00+02:00</updated>
    <id>http://glatter-gotz.com/blog/2012/07/10/php-the-right-way</id>
    <content type="html"><![CDATA[<p>Today I discovered an interesting new project called <a href="http://www.phptherightway.com/">&#8220;PHP: The Right Way&#8221;</a>. It is an open source project maintained by <a href="https://twitter.com/codeguy">Josh Lockhart</a> attempting to provide a well rounded set of best practices for developing in PHP.</p>

<p>While I have not yet attempted to contribute any content I have added the banner to my personal blog to show my support. If you are interested it adding a &#8220;PHP: The Right Way&#8221; banner to the side bar of your <a href="http://octopress.org">Octopress</a> blog, here is how. Allthough, if you are using octopress you probably don&#8217;t need help with this ;-).</p>

<!--more-->


<p>Following is the html for the aside. The 240x400 image size works well for the sidebar width that I have. This is easy to change.</p>

<figure class='code'><figcaption><span>/source/includes/custom/asides/php_the_right_way.html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% if site.php_the_right_way_show %}
</span><span class='line'><span class="nt">&lt;section&gt;</span>
</span><span class='line'>  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.phptherightway.com&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;img</span> <span class="na">class=</span><span class="s">&quot;center&quot;</span> <span class="na">src=</span><span class="s">&quot;http://www.phptherightway.com/images/banners/vert-rect-240x400.png&quot;</span> <span class="na">alt=</span><span class="s">&quot;PHP: The Right Way&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/a&gt;</span>
</span><span class='line'><span class="nt">&lt;/section&gt;</span>
</span><span class='line'>{% endif %}
</span></code></pre></td></tr></table></div></figure>


<p>In <code>/_config.yml</code> add the aside to the list of <code>default_asides</code> in the location you want it to show up in. Mine is at the end.</p>

<figure class='code'><figcaption><span>/_config.yml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">default_asides</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">custom/asides/about.html</span><span class="p-Indicator">,</span> <span class="nv">asides/recent_posts.html</span><span class="p-Indicator">,</span> <span class="nv">asides/twitter.html</span><span class="p-Indicator">,</span> <span class="nv">asides/github.html</span><span class="p-Indicator">,</span> <span class="nv">custom/asides/php_the_right_way.html</span><span class="p-Indicator">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the configuration file add the following to the very end.</p>

<figure class='code'><figcaption><span>/_config.yml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># PHP The Right Way Banner image</span>
</span><span class='line'><span class="l-Scalar-Plain">php_the_right_way_show</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ExactTarget SOAP API: Obtaining an Accurate List of Retrievable Properties]]></title>
    <link href="http://glatter-gotz.com/blog/2012/06/18/exacttarget-soap-api-obtaining-accurate-object-definitions/"/>
    <updated>2012-06-18T07:00:00+02:00</updated>
    <id>http://glatter-gotz.com/blog/2012/06/18/exacttarget-soap-api-obtaining-accurate-object-definitions</id>
    <content type="html"><![CDATA[<p>Aahhh! The joys of integrating with third-party API&#8217;s.
Trying to get your application to talk to a third-party API is sometimes tricky, especially if the API documentation is not up to date.
SOAP is supposed to make this simpler by providing a WSDL from which you can generate classes.
So what are you supposed to do if the documentation and the WSDL seem out of date?</p>

<!-- more -->


<p><strong>Clarification</strong>: By out of date I mean that the documentation for a particular object states it has retrievable properties <em>a</em>, <em>b</em> and <em>c</em>, the WSDL has properties <em>a</em>, <em>c</em> and <em>d</em>, and by trial and error you finally figure out that only <em>a</em> and <em>d</em> are retrievable.</p>

<p>Not to fear, ExactTarget provides a SOAP method that describes objects. You pass the object name as a parameter and in return you get a list of all properties and their attributes. One of the attributes is <strong>isRetrievable</strong>, which is what I am after.</p>

<p>Great! Right? Well, mostly&#8230;</p>

<p>For most objects the method described below returns accurate results from what I can tell. The only object I have encountered so far that has an incorrect result form this method is <a href="http://docs.code.exacttarget.com/020_Web_Service_Guide/Objects/EmailSendDefinition">EmailSendDefinition</a>.</p>

<figure class='code'><figcaption><span>EmailSendDefinition retrievable properties </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">Client</span><span class="o">.</span><span class="nx">ID</span>
</span><span class='line'><span class="nx">CreatedDate</span>
</span><span class='line'><span class="nx">ModifiedDate</span>
</span><span class='line'><span class="nx">ObjectID</span>
</span><span class='line'><span class="nx">CustomerKey</span>
</span><span class='line'><span class="nx">Name</span>
</span><span class='line'><span class="nx">CategoryID</span>
</span><span class='line'><span class="nx">Description</span>
</span><span class='line'><span class="nx">SendClassification</span><span class="o">.</span><span class="nx">CustomerKey</span>
</span><span class='line'><span class="nx">SenderProfile</span><span class="o">.</span><span class="nx">CustomerKey</span>
</span><span class='line'><span class="nx">SenderProfile</span><span class="o">.</span><span class="nx">FromName</span>
</span><span class='line'><span class="nx">SenderProfile</span><span class="o">.</span><span class="nx">FromAddress</span>
</span><span class='line'><span class="nx">DeliveryProfile</span><span class="o">.</span><span class="nx">CusomterKey</span>            <span class="c1">// &lt;-- Generates error</span>
</span><span class='line'><span class="nx">DeliveryProfile</span><span class="o">.</span><span class="nx">CustomerKey</span>
</span><span class='line'><span class="nx">DeliveryProfile</span><span class="o">.</span><span class="nx">SourceAddressType</span>
</span><span class='line'><span class="nx">DeliveryProfile</span><span class="o">.</span><span class="nx">PrivateIP</span>
</span><span class='line'><span class="nx">DeliveryProfile</span><span class="o">.</span><span class="nx">DomainType</span>
</span><span class='line'><span class="nx">DeliveryProfile</span><span class="o">.</span><span class="nx">PrivateDomain</span>
</span><span class='line'><span class="nx">DeliveryProfile</span><span class="o">.</span><span class="nx">HeaderSalutationSource</span>
</span><span class='line'><span class="nx">DeliveryProfile</span><span class="o">.</span><span class="nx">HeaderContentArea</span><span class="o">.</span><span class="nx">ID</span>   <span class="c1">// &lt;-- Generates error</span>
</span><span class='line'><span class="nx">DeliveryProfile</span><span class="o">.</span><span class="nx">FooterSalutationSource</span>
</span><span class='line'><span class="nx">DeliveryProfile</span><span class="o">.</span><span class="nx">FooterContentArea</span><span class="o">.</span><span class="nx">ID</span>   <span class="c1">// &lt;-- Generates error</span>
</span><span class='line'><span class="nx">SuppressTracking</span>
</span><span class='line'><span class="nx">IsSendLogging</span>
</span><span class='line'><span class="nx">Email</span><span class="o">.</span><span class="nx">ID</span>
</span><span class='line'><span class="nx">CCEmail</span>
</span><span class='line'><span class="nx">BccEmail</span>
</span><span class='line'><span class="nx">AutoBccEmail</span>
</span><span class='line'><span class="nx">TestEmailAddr</span>
</span><span class='line'><span class="nx">EmailSubject</span>
</span><span class='line'><span class="nx">DynamicEmailSubject</span>
</span><span class='line'><span class="nx">IsMultipart</span>
</span><span class='line'><span class="nx">IsWrapped</span>
</span><span class='line'><span class="nx">SendLimit</span>
</span><span class='line'><span class="nx">SendWindowOpen</span>
</span><span class='line'><span class="nx">SendWindowCloses</span>                       <span class="c1">// &lt;-- Generates error</span>
</span><span class='line'><span class="nx">DeduplicateByEmail</span>
</span><span class='line'><span class="nx">ExclusionFilter</span>
</span><span class='line'><span class="nx">Additional</span>
</span><span class='line'><span class="nx">SendDefinitionList</span>
</span><span class='line'><span class="nx">IsPlatformObject</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Describe method is quite handy and I use it quite a bit when exploring the API, so I added it to my PHP library for accessing ExactTarget&#8217;s SOAP API.
You can get the lib <a href="https://github.com/hglattergotz/ExactTarget-PHP-SOAP-API">here</a>, and this is how you would get the definition for the above EmailSendDefinition object:</p>

<figure class='code'><figcaption><span>describe.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="nx">ETCore</span><span class="o">::</span><span class="na">initialize</span><span class="p">(</span><span class="nv">$userName</span><span class="p">,</span> <span class="nv">$password</span><span class="p">);</span>
</span><span class='line'><span class="nb">print_r</span><span class="p">(</span><span class="nx">ETCore</span><span class="o">::</span><span class="na">getObjectDefinition</span><span class="p">(</span><span class="s1">&#39;EmailSendDefinition&#39;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Result </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">definition</span> <span class="o">=</span> <span class="k">stdClass</span> <span class="nx">Object</span>
</span><span class='line'><span class="p">(</span>
</span><span class='line'>    <span class="p">[</span><span class="nx">ObjectType</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">EmailSendDefinition</span>
</span><span class='line'>    <span class="p">[</span><span class="nx">Properties</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="k">Array</span>
</span><span class='line'>        <span class="p">(</span>
</span><span class='line'>            <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="k">stdClass</span> <span class="nx">Object</span>
</span><span class='line'>                <span class="p">(</span>
</span><span class='line'>                    <span class="p">[</span><span class="nx">PartnerKey</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>                    <span class="p">[</span><span class="nx">ObjectID</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>                    <span class="p">[</span><span class="nx">Name</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">Client</span><span class="o">.</span><span class="nx">ID</span>
</span><span class='line'>                    <span class="p">[</span><span class="nx">DataType</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">Int32</span>
</span><span class='line'>                    <span class="p">[</span><span class="nx">IsUpdatable</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>                    <span class="p">[</span><span class="nx">IsRetrievable</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">1</span>
</span><span class='line'>                    <span class="p">[</span><span class="nx">IsRequired</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="k">stdClass</span> <span class="nx">Object</span>
</span><span class='line'>                <span class="p">(</span>
</span><span class='line'>                    <span class="p">[</span><span class="nx">PartnerKey</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>                    <span class="p">[</span><span class="nx">ObjectID</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>                    <span class="p">[</span><span class="nx">Name</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">CreatedDate</span>
</span><span class='line'>                    <span class="p">[</span><span class="nx">DataType</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">DateTime</span>
</span><span class='line'>                    <span class="p">[</span><span class="nx">IsUpdatable</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">1</span>
</span><span class='line'>                    <span class="p">[</span><span class="nx">IsRetrievable</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">1</span>
</span><span class='line'>                    <span class="p">[</span><span class="nx">IsRequired</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="k">stdClass</span> <span class="nx">Object</span>
</span><span class='line'>                <span class="p">(</span>
</span><span class='line'>                    <span class="p">[</span><span class="nx">PartnerKey</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>                    <span class="p">[</span><span class="nx">ObjectID</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>                    <span class="p">[</span><span class="nx">Name</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">ModifiedDate</span>
</span><span class='line'>                    <span class="p">[</span><span class="nx">DataType</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="nx">DateTime</span>
</span><span class='line'>                    <span class="p">[</span><span class="nx">IsUpdatable</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">1</span>
</span><span class='line'>                    <span class="p">[</span><span class="nx">IsRetrievable</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">1</span>
</span><span class='line'>                    <span class="p">[</span><span class="nx">IsRequired</span><span class="p">]</span> <span class="o">=&gt;</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>             <span class="o">:</span>
</span><span class='line'>             <span class="o">:</span>
</span></code></pre></td></tr></table></div></figure>


<p>As I learn more about the ExactTarget SOAP API and SOAP itself I will be posting my findings and expanding the library on github.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Appcelerator Titanium - Email a Screen Shot with a Single Button Click]]></title>
    <link href="http://glatter-gotz.com/blog/2012/04/30/appcelerator-titanium-email-a-screen-shot-with-a-single-button-click/"/>
    <updated>2012-04-30T16:30:00+02:00</updated>
    <id>http://glatter-gotz.com/blog/2012/04/30/appcelerator-titanium-email-a-screen-shot-with-a-single-button-click</id>
    <content type="html"><![CDATA[<p>During testing it is often helpful if a tester can send you, the developer, a screen shot of a particular window in the app.
Of course this is generally very simple to do on an iOS device right out of the box. However, you can make it even easer for your testers.</p>

<!-- more -->


<p>With a single click of a button in your app you can</p>

<ul>
<li>grab the screen content</li>
<li>save it as an image</li>
<li>attach it to an email</li>
<li>prepopulate the message with default values</li>
<li>allow the user to write a comment and send</li>
</ul>


<p>Providing all that cuts down on a whole lot of steps and might make it more likely that you get that much needed feedback.</p>

<figure class='code'><figcaption><span>lib/UiElements.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * For beta testing purposes create a camera button that can be set</span>
</span><span class='line'><span class="cm"> * as the right nav button. Upon clicking create a screenshot and</span>
</span><span class='line'><span class="cm"> * display the email dialog with pre-populated fields.</span>
</span><span class='line'><span class="cm"> * This is a convenience for testers to send a screenshot straight</span>
</span><span class='line'><span class="cm"> * out of the applicaiton.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">createScreenShotButton</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">buttonObjects</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">image</span><span class="o">:</span><span class="s1">&#39;images/camera.png&#39;</span><span class="p">,</span> <span class="nx">width</span><span class="o">:</span><span class="mi">45</span><span class="p">}</span>
</span><span class='line'>    <span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">buttonBar</span> <span class="o">=</span> <span class="nx">Titanium</span><span class="p">.</span><span class="nx">UI</span><span class="p">.</span><span class="nx">createButtonBar</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">labels</span><span class="o">:</span><span class="nx">buttonObjects</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">backgroundColor</span><span class="o">:</span><span class="s1">&#39;#000&#39;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">indicator</span> <span class="o">=</span> <span class="nx">createIndicatorWindow</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">buttonBar</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">index</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">Ti</span><span class="p">.</span><span class="nx">Media</span><span class="p">.</span><span class="nx">takeScreenshot</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">indicator</span><span class="p">.</span><span class="nx">openIndicator</span><span class="p">();</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">emailDialog</span> <span class="o">=</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">UI</span><span class="p">.</span><span class="nx">createEmailDialog</span><span class="p">()</span>
</span><span class='line'>                <span class="nx">emailDialog</span><span class="p">.</span><span class="nx">subject</span> <span class="o">=</span> <span class="s2">&quot;Screenshot from myApp&quot;</span><span class="p">;</span>
</span><span class='line'>                <span class="nx">emailDialog</span><span class="p">.</span><span class="nx">toRecipients</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;my@email-address.com&#39;</span><span class="p">];</span>
</span><span class='line'>                <span class="nx">emailDialog</span><span class="p">.</span><span class="nx">messageBody</span> <span class="o">=</span> <span class="s1">&#39;Describe the problem please&#39;</span><span class="p">;</span>
</span><span class='line'>                <span class="nx">emailDialog</span><span class="p">.</span><span class="nx">addAttachment</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">media</span><span class="p">);</span>
</span><span class='line'>                <span class="nx">emailDialog</span><span class="p">.</span><span class="nx">open</span><span class="p">();</span>
</span><span class='line'>                <span class="nx">indicator</span><span class="p">.</span><span class="nx">closeIndicator</span><span class="p">();</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">buttonBar</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">createScreenShotButton</span> <span class="o">=</span> <span class="nx">createScreenShotButton</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The activity indicator used in this example is described <a href="http://glatter-gotz.com/blog/2012/03/19/appcelerator-titanium-a-nice-looking-activity-indicator-window">here</a>.</p>

<p>A great place to get free icons for this button is at <a href="http://glyphish.com/">glyphish.com</a>.</p>

<p>To provide this screen shot button on specific windows of your application simply do the following</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">win</span> <span class="o">=</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">UI</span><span class="p">.</span><span class="nx">createWindow</span><span class="p">({});</span>
</span><span class='line'><span class="nx">uie</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;lib/UiElements&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">bb</span> <span class="o">=</span> <span class="nx">uie</span><span class="p">.</span><span class="nx">createScreenShotButton</span><span class="p">();</span>
</span><span class='line'><span class="nx">win</span><span class="p">.</span><span class="nx">setRightNavButton</span><span class="p">(</span><span class="nx">bb</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// When returning to this window from a child view the nav button gets</span>
</span><span class='line'><span class="c1">// removed by default. This will show it again.</span>
</span><span class='line'><span class="nx">win</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;focus&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">win</span><span class="p">.</span><span class="nx">setRightNavButton</span><span class="p">(</span><span class="nx">bb</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Appcelerator Titanium - A Nice Looking Activity Indicator Window]]></title>
    <link href="http://glatter-gotz.com/blog/2012/03/19/appcelerator-titanium-a-nice-looking-activity-indicator-window/"/>
    <updated>2012-03-19T13:13:00+01:00</updated>
    <id>http://glatter-gotz.com/blog/2012/03/19/appcelerator-titanium-a-nice-looking-activity-indicator-window</id>
    <content type="html"><![CDATA[<blockquote><h4>UPDATE (April 11th 2013):</h4>

<p>I updated the demo project on <a href="http://github.com/hglattergotz/indicatordemo">github</a> with a patch from Khawar. The demo now also works on android.</p></blockquote>

<p>The <em>Titanium.UI.ActivityIndicator</em> is a commonly used component in my iOS applications, but on its own it does not look very appealing.
To make the activity indicator look a little nicer I dressed it up in its own window that has is slightly opaque and stuck it in a commonjs module.</p>

<!--more-->




<figure class='code'><figcaption><span>lib/UiElements.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Indicator window with a spinner and a label</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @param {Object} args</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">createIndicatorWindow</span><span class="p">(</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">width</span> <span class="o">=</span> <span class="mi">180</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">height</span> <span class="o">=</span> <span class="mi">50</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">args</span> <span class="o">=</span> <span class="nx">args</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">top</span> <span class="o">=</span> <span class="nx">args</span><span class="p">.</span><span class="nx">top</span> <span class="o">||</span> <span class="mi">140</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">text</span> <span class="o">=</span> <span class="nx">args</span><span class="p">.</span><span class="nx">text</span> <span class="o">||</span> <span class="s1">&#39;Loading ...&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">win</span> <span class="o">=</span> <span class="nx">Titanium</span><span class="p">.</span><span class="nx">UI</span><span class="p">.</span><span class="nx">createWindow</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">height</span><span class="o">:</span>           <span class="nx">height</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">width</span><span class="o">:</span>            <span class="nx">width</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">top</span><span class="o">:</span>              <span class="nx">top</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">borderRadius</span><span class="o">:</span>     <span class="mi">10</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">touchEnabled</span><span class="o">:</span>     <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">backgroundColor</span><span class="o">:</span>  <span class="s1">&#39;#000&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">opacity</span><span class="o">:</span>          <span class="mf">0.6</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">view</span> <span class="o">=</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">UI</span><span class="p">.</span><span class="nx">createView</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">width</span><span class="o">:</span>   <span class="nx">Ti</span><span class="p">.</span><span class="nx">UI</span><span class="p">.</span><span class="nx">SIZE</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">height</span><span class="o">:</span>  <span class="nx">Ti</span><span class="p">.</span><span class="nx">UI</span><span class="p">.</span><span class="nx">FILL</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">center</span><span class="o">:</span>  <span class="p">{</span> <span class="nx">x</span><span class="o">:</span> <span class="p">(</span><span class="nx">width</span><span class="o">/</span><span class="mi">2</span><span class="p">),</span> <span class="nx">y</span><span class="o">:</span> <span class="p">(</span><span class="nx">height</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span> <span class="p">},</span>
</span><span class='line'>        <span class="nx">layout</span><span class="o">:</span>  <span class="s1">&#39;horizontal&#39;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">osIndicatorStyle</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">style</span> <span class="o">=</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">UI</span><span class="p">.</span><span class="nx">iPhone</span><span class="p">.</span><span class="nx">ActivityIndicatorStyle</span><span class="p">.</span><span class="nx">PLAIN</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="s1">&#39;iPhone OS&#39;</span> <span class="o">!==</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">Platform</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">style</span> <span class="o">=</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">UI</span><span class="p">.</span><span class="nx">ActivityIndicatorStyle</span><span class="p">.</span><span class="nx">DARK</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nx">style</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">activityIndicator</span> <span class="o">=</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">UI</span><span class="p">.</span><span class="nx">createActivityIndicator</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">style</span><span class="o">:</span>   <span class="nx">osIndicatorStyle</span><span class="p">(),</span>
</span><span class='line'>        <span class="nx">left</span><span class="o">:</span>    <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">height</span><span class="o">:</span>  <span class="nx">Ti</span><span class="p">.</span><span class="nx">UI</span><span class="p">.</span><span class="nx">FILL</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">width</span><span class="o">:</span>   <span class="mi">30</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">label</span> <span class="o">=</span> <span class="nx">Titanium</span><span class="p">.</span><span class="nx">UI</span><span class="p">.</span><span class="nx">createLabel</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">left</span><span class="o">:</span>    <span class="mi">10</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">width</span><span class="o">:</span>   <span class="nx">Ti</span><span class="p">.</span><span class="nx">UI</span><span class="p">.</span><span class="nx">FILL</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">height</span><span class="o">:</span>  <span class="nx">Ti</span><span class="p">.</span><span class="nx">UI</span><span class="p">.</span><span class="nx">FILL</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">text</span><span class="o">:</span>    <span class="nx">text</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">color</span><span class="o">:</span>   <span class="s1">&#39;#fff&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">font</span><span class="o">:</span>    <span class="p">{</span> <span class="nx">fontFamily</span><span class="o">:</span> <span class="s1">&#39;Helvetica Neue&#39;</span><span class="p">,</span> <span class="nx">fontSize</span><span class="o">:</span> <span class="mi">16</span><span class="p">,</span> <span class="nx">fontWeight</span><span class="o">:</span> <span class="s1">&#39;bold&#39;</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">view</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">activityIndicator</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">view</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">label</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">win</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">view</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">openIndicator</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">win</span><span class="p">.</span><span class="nx">open</span><span class="p">();</span>
</span><span class='line'>        <span class="nx">activityIndicator</span><span class="p">.</span><span class="nx">show</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">win</span><span class="p">.</span><span class="nx">openIndicator</span> <span class="o">=</span> <span class="nx">openIndicator</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">closeIndicator</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">activityIndicator</span><span class="p">.</span><span class="nx">hide</span><span class="p">();</span>
</span><span class='line'>        <span class="nx">win</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">win</span><span class="p">.</span><span class="nx">closeIndicator</span> <span class="o">=</span> <span class="nx">closeIndicator</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">win</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Public interface</span>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">createIndicatorWindow</span> <span class="o">=</span> <span class="nx">createIndicatorWindow</span>
</span></code></pre></td></tr></table></div></figure>


<p>This would then be called from inside an event listener like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">uie</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;lib/UiElements&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">indicator</span> <span class="o">=</span> <span class="nx">uie</span><span class="p">.</span><span class="nx">createIndicatorWindow</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">someViewObject</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">indicator</span><span class="p">.</span><span class="nx">openIndicator</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Do the work that takes a while</span>
</span><span class='line'>        <span class="c1">// and requires an activity indicator</span>
</span><span class='line'>        <span class="nx">indicator</span><span class="p">.</span><span class="nx">closeIndicator</span><span class="p">();</span>
</span><span class='line'>    <span class="p">},</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ExactTarget SOAP Upsert with PHP]]></title>
    <link href="http://glatter-gotz.com/blog/2011/10/31/exacttarget-soap-upsert-with-php/"/>
    <updated>2011-10-31T00:00:00+01:00</updated>
    <id>http://glatter-gotz.com/blog/2011/10/31/exacttarget-soap-upsert-with-php</id>
    <content type="html"><![CDATA[<p>There is quite a bit of documentation for the ExactTarget SOAP API that includes lots of code samples. But unfortunately the PHP code samples are not quite as plentiful as the .NET and Java ones.
After lots of searching and lot of trial and error I finally got my upsert working. An upsert is a SOAP method in the ExactTarget SOAP API that will either update or insert a record depending on whether it is already present or not.</p>

<!--more-->


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="nv">$uo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ExactTarget_UpdateOptions</span><span class="p">();</span>
</span><span class='line'><span class="nv">$uo</span><span class="o">-&gt;</span><span class="na">SaveOptions</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$so</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ExactTarget_SaveOption</span><span class="p">();</span>
</span><span class='line'><span class="nv">$so</span><span class="o">-&gt;</span><span class="na">PropertyName</span> <span class="o">=</span> <span class="s1">&#39;DataExtensionObject&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$so</span><span class="o">-&gt;</span><span class="na">SaveAction</span> <span class="o">=</span> <span class="nx">ExactTarget_SaveAction</span><span class="o">::</span><span class="na">UpdateAdd</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$uo</span><span class="o">-&gt;</span><span class="na">SaveOptions</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$so</span><span class="p">;</span>
</span><span class='line'><span class="nv">$uoSo</span> <span class="o">=</span> <span class="nx">ETCore</span><span class="o">::</span><span class="na">toSoapVar</span><span class="p">(</span><span class="nv">$uo</span><span class="p">,</span> <span class="s1">&#39;UpdateOptions&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$request</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ExactTarget_UpdateRequest</span><span class="p">();</span>
</span><span class='line'><span class="nv">$request</span><span class="o">-&gt;</span><span class="na">Options</span> <span class="o">=</span> <span class="nv">$uoSo</span><span class="p">;</span>
</span><span class='line'><span class="nv">$request</span><span class="o">-&gt;</span><span class="na">Objects</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="nv">$deoSo</span><span class="p">);</span>
</span><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nv">$soapClient</span><span class="o">-&gt;</span><span class="na">Update</span><span class="p">(</span><span class="nv">$request</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Where <em>$deoSo</em> is a DataExtension Object that has been converted to a SoapVar and <em>$soapClient</em> is an ExactTarget soap client instance. The way you get the upsert behavior is to set the saveaction to <em>ExactTarget_SaveAction::UpdateAdd</em>.</p>

<p>If you are looking for a minimal wrapper library that includes the above method take a look at <a href="https://github.com/hglattergotz/ExactTarget-PHP-SOAP-API">this library on gitub</a>. This library gleans quite a few things from the Doctrine ORM, so if you are familiar with that you should feel right at home.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Connecting to Microsoft SQL Server from PHP on OSX and XAMPP]]></title>
    <link href="http://glatter-gotz.com/blog/2011/06/06/connecting-to-microsoft-sql-server-from-php-on-osx-and-xampp/"/>
    <updated>2011-06-06T00:00:00+02:00</updated>
    <id>http://glatter-gotz.com/blog/2011/06/06/connecting-to-microsoft-sql-server-from-php-on-osx-and-xampp</id>
    <content type="html"><![CDATA[<blockquote><h4>UPDATE (March 23rd 2012):</h4>

<p>I recently found a <a href="http://php-osx.liip.ch/">PHP binary </a>that has a one-line installer. It is actively maintained by Liip AG. I now use that in combination with <a href="http://mxcl.github.com/homebrew/">HomeBrew</a> for all the rest. The Liip package is compiled with pdo_dblib which makes the problem described in this post a non-issue.</p></blockquote>

<p>I recently found myself in the position of having to connect to a remote Microsoft SQL Server from my OSX system using PHP. The production environment runs Ubuntu LINUX, where connecting via mssql_connect() was no problem, but I develop on OSX and I could not get this to work initially.</p>

<!--more-->


<p>mssql_connect() simply returns boolean FALSE on failure and PHP tells you little more than</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Warning: mssql_connect<span class="o">()</span>: Unable to connect to server: YOURSERVERNAME
</span></code></pre></td></tr></table></div></figure>


<p>It took quite a few hours to finally figure out that I could turn on some additional logging on the driver level. I use XAMPP and its PHP distribution uses FreeTDS for mssql access.
There is a configuration file for this driver located at</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/Applications/XAMPP/xamppfiles/etc/freetds.conf
</span></code></pre></td></tr></table></div></figure>


<p>that lets you turn on debug logging to a file.</p>

<p>Uncomment the following lines</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>;       dump <span class="nv">file</span> <span class="o">=</span> /tmp/freetds.log
</span><span class='line'>;       debug <span class="nv">flags</span> <span class="o">=</span> 0xffff
</span></code></pre></td></tr></table></div></figure>


<p>And then run your connection attempt again. Take a look at the log for details on the failure.</p>

<p>In the end I added a new entry for an MS SQL server at the end of the freetds.conf file and used its name in the call to mssql_connect().</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>MyServerXYZ<span class="o">]</span>
</span><span class='line'>        <span class="nv">host</span> <span class="o">=</span> the_host_name
</span><span class='line'>        <span class="nv">instance</span> <span class="o">=</span> the_instance_name
</span><span class='line'>        <span class="nv">port</span> <span class="o">=</span> 1433
</span><span class='line'>        tds <span class="nv">version</span> <span class="o">=</span> 9.0
</span></code></pre></td></tr></table></div></figure>


<p>In my case I had to deal with an instance name that would normally be appended to the host name in a connection string, but for this driver configuration you have to use a variable called <em>instance</em>.</p>

<p>In PHP I then use this code during development</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$conn</span> <span class="o">=</span> mssql_connect<span class="o">(</span><span class="s1">&#39;MyServerXYZ&#39;</span>, <span class="nv">$username</span>, <span class="nv">$password</span><span class="o">)</span>;
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
